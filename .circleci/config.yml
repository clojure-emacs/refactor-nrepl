version: 2.1

######################################################################
#
# Start of general purpose config. These can plausibly go into orbs
#
######################################################################

# Default settings for executors

defaults: &defaults
  working_directory: ~/repo

# Runners for OpenJDK 8/11/16/17

executors:
  openjdk8:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1-node
    environment:
      LEIN_ROOT: "true"   # we intended to run lein as root
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
      JVM_OPTS: -Xmx3200m # limit the maximum heap size to prevent out of memory errors
    <<: *defaults

  # JDK 8 is preferred for deployments (https://github.com/benedekfazekas/mranderson/issues/57)
  # Parallelism is disabled, at least for now (https://github.com/benedekfazekas/mranderson/issues/56)
  openjdk8_deploy:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1-node
    environment:
      LEIN_ROOT: "true"   # we intended to run lein as root
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
      JVM_OPTS: -Xmx3200m # limit the maximum heap size to prevent out of memory errors
    <<: *defaults

  openjdk11:
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.9.3-buster-node
    environment:
      LEIN_ROOT: "true"   # we intended to run lein as root
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
      JVM_OPTS: -Xmx3200m --illegal-access=deny # forbid reflective access (this flag doesn't exist for JDK8 or JDK17+)
    <<: *defaults

  openjdk16:
    docker:
      - image: circleci/clojure:openjdk-16-lein-2.9.5-buster-node
    environment:
      LEIN_ROOT: "true"   # we intended to run lein as root
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
      JVM_OPTS: -Xmx3200m --illegal-access=deny # forbid reflective access (this flag doesn't exist for JDK8 or JDK17+)
    <<: *defaults

  openjdk17:
    docker:
      - image: circleci/clojure:openjdk-17-lein-2.9.5-buster-node
    environment:
      LEIN_ROOT: "true"   # we intended to run lein as root
      LEIN_JVM_OPTS: -Dmranderson.internal.no-parallelism=true
      JVM_OPTS: -Xmx3200m
    <<: *defaults

# Runs a given set of steps, with some standard pre- and post-
# steps, including restoring of cache, saving of cache.
#
# we also install `make` here.
#
# Adapted from https://github.com/lambdaisland/meta/blob/master/circleci/clojure_orb.yml

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies and Clojure classpath cache
      files cached.
      This command restores ~/.m2 and .cpcache if they were previously cached,
      then runs the provided steps, and finally saves the cache.
      The cache-key is generated based on the contents of `deps.edn` present in
      the `working_directory`.
    parameters:
      steps:
        type: steps
      files:
        description: Files to consider when creating the cache key
        type: string
        default: "deps.edn project.clj build.boot"
      cache_version:
        type: string
        description: "Change this value to force a cache update"
        default: "1"
    steps:
      - run:
          name: Install make
          command: |
            sudo apt-get install make
      - run:
          name: Generate Cache Checksum
          command: |
            for file in << parameters.files >>
            do
              find . -name $file -exec cat {} +
            done | shasum | awk '{print $1}' > /tmp/clojure_cache_seed
      - restore_cache:
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
            - .cpcache
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}

# The jobs are relatively simple. One runs utility commands against
# latest stable JDK + Clojure, the other against specified versions

jobs:

  util_job:
    description: |
      Running utility commands/checks (linter etc.)
      Always uses Java LTS latest and Clojure 1.11
    parameters:
      steps:
        type: steps
    executor: openjdk17
    environment:
      VERSION: "1.11"
    steps:
      - checkout
      - with_cache:
          cache_version: "1.11"
          steps: << parameters.steps >>

  deploy:
    executor: openjdk8_deploy
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run: lein with-profile -user,+test deps
      - save_cache:
          paths:
            - ~/.m2
          key: v2-dependencies-{{ checksum "project.clj" }}
      - run:
         name: Deploy
         command: |
           lein with-profile -user,+deploy run -m deploy-release make deploy

  test_code:
    description: |
      Run tests against given version of JDK and Clojure
    parameters:
      jdk_version:
        description: Version of JDK to test against
        type: string
      clojure_version:
        description: Version of Clojure to test against
        type: string
    executor: << parameters.jdk_version >>
    environment:
      VERSION: << parameters.clojure_version >>
    steps:
      - checkout
      - with_cache:
          cache_version: << parameters.clojure_version >>|<< parameters.jdk_version >>
          steps:
            - run:
                name: Running tests with inlined deps
                command: make test
            - run:
                name: Exercise jarring
                command: make jar
            - run:
                name: Verify that jarring includes the plugin
                command: grep --silent "refactor_nrepl/plugin.clj" <(zipinfo -1 target/refactor-nrepl-*.jar)

######################################################################
#
# End general purpose configs
#
######################################################################


# The ci-test-matrix does the following:
#
# - run tests against the target matrix
#   - All our defined JDKs
#   - Clojure 1.10, 1.11, master
# - linter, eastwood and cljfmt
# - runs code coverage report

workflows:
  version: 2.1
  ci-test-matrix:
    jobs:
      - test_code:
          matrix:
            parameters:
              clojure_version: ["1.10", "1.11", "master"]
              jdk_version: [openjdk8, openjdk11, openjdk16, openjdk17]
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
      - util_job:
          name: Code Linting
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
          steps:
            - run:
                name: Running cljfmt
                command: |
                  make cljfmt
            - run:
                name: Running clj-kondo
                command: |
                  make kondo
            - run:
                name: Running Eastwood
                command: |
                  make eastwood
      - deploy:
          requires:
            - test_code
            - "Code Linting"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
